package com.williamwigemo.spotify;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.williamwigemo.PlaylistService;
import com.williamwigemo.SpotifyTrackMetrics;
import com.williamwigemo.entities.MediaEntity;
import com.williamwigemo.entities.PlaylistEntity;
import com.williamwigemo.entities.SpotifyTrackEntity;

public class SpotifyPlaylistSync {

    private static final String PlaylistName = "Soundtrack from Watched Movies [Generated by movie-soundtrack-spotify-sync]";
    private static final int MinPopularity = 64;
    private static final double MinSignificanceScore = 0.7;

    private SpotifyAPI spotifyAPI;
    private PlaylistService playlistService;

    public SpotifyPlaylistSync(SpotifyAPI spotifyAPI) {
        this.spotifyAPI = spotifyAPI;
        this.playlistService = new PlaylistService();
    }

    private PlaylistEntity playlist = null;

    private PlaylistEntity getPlaylist() throws SpotifyApiException {
        if (playlist == null) {
            // search database for playlist

            PlaylistEntity existingPlaylist = this.playlistService.getPlaylistByName(PlaylistName);
            if (existingPlaylist != null) {
                this.playlist = existingPlaylist;
            } else {
                // else fetch from spotify API
                List<SpotifyPlaylist> playlists = this.spotifyAPI.getPlaylists();

                if (!playlists.stream().anyMatch(l -> l.name.equals(PlaylistName))) {
                    // then create playlist
                    this.playlist = this.spotifyAPI.createPlaylist(PlaylistName).toEntity();
                } else {
                    this.playlist = playlists.stream().filter(o -> o.name.equals(PlaylistName)).findFirst().get()
                            .toEntity();
                }

                this.playlistService.createPlaylist(this.playlist);
            }
        }

        assert this.playlist != null;
        return this.playlist;
    }

    public Set<SpotifyTrackEntity> updateMovies(Map<MediaEntity, Set<SpotifyTrackEntity>> movieToTracksMap)
            throws SpotifyApiException {
        PlaylistEntity playlist = getPlaylist();
        Set<String> spotifyIds = new HashSet<>();
        Map<String, SpotifyTrackEntity> uriToTrack = new HashMap<>();

        for (MediaEntity movie : movieToTracksMap.keySet()) {
            Set<SpotifyTrackEntity> tracks = movieToTracksMap.get(movie);
            SpotifyTrackMetrics trackMetrics = new SpotifyTrackMetrics(tracks);

            // filter by "popularity"
            for (SpotifyTrackEntity track : tracks) {
                if (trackMetrics.getSignificanceScore(track) >= MinSignificanceScore
                        && track.getPopularity() >= MinPopularity) {
                    spotifyIds.add(track.getSpotifyUri());
                    uriToTrack.put(track.getSpotifyUri(), track);
                }
            }
        }

        // remove existing tracks
        Set<String> existingSpotifyUris = new HashSet<>();
        SpotifyGetPlaylistTracksResponse res = null;
        do {
            if (res == null) {
                res = this.spotifyAPI.getPlaylistTracksById(this.playlist.getSpotifyId());
            } else {
                res = this.spotifyAPI.getPlaylistTracks(res.next);
            }
            res.items.stream().map(o -> o.track.uri).forEach(existingSpotifyUris::add);
        } while (res.next != null);
        spotifyIds.removeAll(existingSpotifyUris);

        Set<SpotifyTrackEntity> tracksAdded = new HashSet<>();
        for (String uri : uriToTrack.keySet()) {
            if (spotifyIds.contains(uri)) {
                tracksAdded.add(uriToTrack.get(uri));
            }
        }

        this.spotifyAPI.addItemsToPlaylist(playlist.getSpotifyId(), spotifyIds.stream().toList());
        return tracksAdded;
    }
}
