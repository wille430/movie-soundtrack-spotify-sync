package com.williamwigemo.spotify;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.williamwigemo.SpotifyTrackMetrics;
import com.williamwigemo.trakt.TraktMovie;

public class SpotifyPlaylistSync {

    private static final String PlaylistName = "Soundtrack from Watched Movies [Generated by movie-soundtrack-spotify-sync]";
    private static final int MinPopularity = 64;
    private static final double MinSignificanceScore = 0.7;

    private SpotifyAPI spotifyAPI;

    public SpotifyPlaylistSync(SpotifyAPI spotifyAPI) {
        this.spotifyAPI = spotifyAPI;
    }

    private SpotifyPlaylist playlist = null;

    private SpotifyPlaylist getPlaylist() throws SpotifyApiException {
        if (playlist == null) {
            List<SpotifyPlaylist> playlists = this.spotifyAPI.getPlaylists();

            if (!playlists.stream().anyMatch(l -> l.name.equals(PlaylistName))) {
                // then create playlist
                this.playlist = this.spotifyAPI.createPlaylist(PlaylistName);
            } else {
                this.playlist = playlists.stream().filter(o -> o.name.equals(PlaylistName)).findFirst().get();
            }
        }

        assert this.playlist != null;
        return this.playlist;
    }

    public Set<SpotifyTrack> updateMovies(Map<TraktMovie, Set<SpotifyTrack>> movieToTracksMap)
            throws SpotifyApiException {
        SpotifyPlaylist playlist = getPlaylist();
        Set<String> spotifyIds = new HashSet<>();
        Map<String, SpotifyTrack> uriToTrack = new HashMap<>();

        for (TraktMovie movie : movieToTracksMap.keySet()) {
            Set<SpotifyTrack> tracks = movieToTracksMap.get(movie);
            SpotifyTrackMetrics trackMetrics = new SpotifyTrackMetrics(tracks);

            // filter by "popularity"
            for (SpotifyTrack track : tracks) {
                if (trackMetrics.getSignificanceScore(track) >= MinSignificanceScore
                        && track.popularity >= MinPopularity) {
                    spotifyIds.add(track.uri);
                    uriToTrack.put(track.uri, track);
                }
            }
        }

        // remove existing tracks
        Set<String> existingSpotifyUris = new HashSet<>();
        SpotifyGetPlaylistTracksResponse res = null;
        do {
            if (res == null) {
                res = this.spotifyAPI.getPlaylistTracksById(this.playlist.id);
            } else {
                res = this.spotifyAPI.getPlaylistTracks(res.next);
            }
            res.items.stream().map(o -> o.track.uri).forEach(existingSpotifyUris::add);
        } while (res.next != null);
        spotifyIds.removeAll(existingSpotifyUris);

        Set<SpotifyTrack> tracksAdded = new HashSet<>();
        for (String uri : uriToTrack.keySet()) {
            if (spotifyIds.contains(uri)) {
                tracksAdded.add(uriToTrack.get(uri));
            }
        }

        this.spotifyAPI.addItemsToPlaylist(playlist.id, spotifyIds.stream().toList());
        return tracksAdded;
    }
}
